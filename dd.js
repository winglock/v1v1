/* Pillar Protocol - Sonic Testnet (Updated Wallet Connection & Dynamic Chart) */
(function () {
  'use strict';

  // ---------- Ïú†Ìã∏Î¶¨Ìã∞ Ìï®Ïàò ----------
  function el(tag, attrs = {}, children = []) {
    const element = document.createElement(tag);
    Object.entries(attrs).forEach(([key, value]) => {
      if (key === 'onclick') {
        element.onclick = value;
      } else {
        element.setAttribute(key, value);
      }
    });
    children.forEach(child => {
      if (typeof child === 'string') {
        element.appendChild(document.createTextNode(child));
      } else if (child instanceof Node) {
        element.appendChild(child);
      }
    });
    return element;
  }

  function nice(num) {
    const n = parseFloat(num);
    if (isNaN(n)) return '0';
    return n.toLocaleString('en-US', { maximumFractionDigits: 2 });
  }

  function loadScript(src) {
    return new Promise((resolve, reject) => {
      if (document.querySelector(`script[src="${src}"]`)) {
        resolve();
        return;
      }
      const script = document.createElement('script');
      script.src = src;
      script.onload = resolve;
      script.onerror = reject;
      document.head.appendChild(script);
    });
  }

  // ---------- ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÑ§Ï†ï ----------
  const SONIC_BLAZE_TESTNET = {
    chainId: 666888,
    chainName: 'Sonic Blaze Testnet',
    nativeCurrency: { name: 'SONIC', symbol: 'S', decimals: 18 },
    rpcUrls: ['https://rpc.sonic.build/'],
    blockExplorerUrls: ['https://explorer.sonic.build/']
  };

  const HARDHAT_LOCALNET = {
    chainId: 31337,
    chainName: 'Hardhat Localhost',
    nativeCurrency: { name: 'ETH', symbol: 'ETH', decimals: 18 },
    rpcUrls: ['http://127.0.0.1:8545/']
  };

  // <<<<<<< Ï§ëÏöî: ÏµúÏ¢Ö ÌÉÄÍ≤ü ÎÑ§Ìä∏ÏõåÌÅ¨Î•º Sonic Blaze ÌÖåÏä§Ìä∏ÎÑ∑ÏúºÎ°ú ÏÑ§Ï†ï >>>>>>>
  const CURRENT_NETWORK = SONIC_BLAZE_TESTNET;

  // Sonic Client Mock (Í∏∞Î≥∏Ï†ÅÏù∏ ÎÑ§Ìä∏ÏõåÌÅ¨ Ï†ïÎ≥¥ Î∞òÌôò)
  const sonicClient = {
    async getNetwork() {
      if (window.ethereum) {
        try {
          const chainId = await window.ethereum.request({ method: 'eth_chainId' });
          return { chainId: parseInt(chainId, 16) };
        } catch (error) {
          console.warn('Network detection failed:', error);
          return { chainId: CURRENT_NETWORK.chainId };
        }
      }
      return { chainId: CURRENT_NETWORK.chainId };
    }
  };

  // ---------- Ïª®Ìä∏ÎûôÌä∏ Ï£ºÏÜå Î∞è ABI ----------
  const CONTRACTS = {
    // TODO: Sonic Blaze ÌÖåÏä§Ìä∏ÎÑ∑Ïóê Î∞∞Ìè¨ ÌõÑ Ïã§Ï†ú Ïª®Ìä∏ÎûôÌä∏ Ï£ºÏÜåÎ°ú ÏóÖÎç∞Ïù¥Ìä∏Ìï¥Ïïº Ìï©ÎãàÎã§.
    dynamicVault: "0x0000000000000000000000000000000000000000",
    usdc: "0x0000000000000000000000000000000000000000",
    weth: "0x0000000000000000000000000000000000000000"
  };
  
  const DYNAMIC_VAULT_ABI = [
      "function openPosition(uint256 collateralAmount, uint256 leverageBps, uint256 rangeBps, uint8 marginType) external",
      "function closePosition(uint256 positionId) external",
      "function getPosition(uint256 positionId) view returns (address owner, uint256 collateral, uint256 entryPrice)",
      "function getNormalRange() view returns (uint256 lower, uint256 upper)" // ÏòàÏãú Ìï®Ïàò
  ];

  const USDC_ABI = [
      "function approve(address spender, uint256 amount) external returns (bool)",
      "function balanceOf(address account) view returns (uint256)"
  ];

  // ---------- ÏÉÅÌÉú Í¥ÄÎ¶¨ ----------
  const state = {
    provider: null,
    signer: null,
    userAddress: null,
    chainId: null,
    isConnected: false,
    balances: { native: '0', usdc: '0', weth: '0' },
    currentPrice: 2435.80,
    priceChange24h: 2.4,
    leverage: 20000,
    selectedRange: 0,
    marginType: 1,
    positions: [],
    allowedRangeBps: 2500, // Ïä§ÎßàÌä∏ Ïª®Ìä∏ÎûôÌä∏ÏóêÏÑú Í∞ÄÏ†∏Ïò¨ Í∏∞Î≥∏Í∞í
  };

  // ---------- CSS Ïä§ÌÉÄÏùº ----------
  function injectStyles() {
    const css = `
      * { box-sizing: border-box; }
      body { 
        margin: 0; padding: 0; 
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; 
        background: linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 100%);
        color: #e2e8f0; min-height: 100vh;
      }
      .nav { 
        display: flex; justify-content: space-between; align-items: center;
        padding: 15px 30px; background: rgba(16, 24, 54, 0.9);
        backdrop-filter: blur(10px); border-bottom: 1px solid rgba(255,255,255,0.1);
      }
      .nav .logo { font-size: 20px; font-weight: 700; color: #60a5fa; }
      .nav .right { display: flex; align-items: center; gap: 15px; }
      .btn {
        padding: 8px 16px; border: none; border-radius: 6px; cursor: pointer;
        font-size: 14px; font-weight: 500; transition: all 0.2s;
        text-decoration: none; display: inline-block; text-align: center;
      }
      .btn.primary { background: #3b82f6; color: white; }
      .btn.primary:hover { background: #2563eb; }
      .btn.ghost { background: rgba(255,255,255,0.1); color: #e2e8f0; }
      .btn.ghost:hover { background: rgba(255,255,255,0.2); }
      .btn.danger { background: #ef4444; color: white; }
      .btn.danger:hover { background: #dc2626; }
      .btn:disabled { opacity: 0.5; cursor: not-allowed; }
      .pill {
        padding: 4px 10px; border-radius: 12px; font-size: 12px;
        background: rgba(255,255,255,0.1); color: #cbd5e1;
      }
      .pill.active { background: #22c55e; color: white; }
      .pill.ok { color: #22c55e; }
      .pill.warn { color: #f59e0b; }
      .pill.err { color: #ef4444; }
      .wrap { 
        display: grid; grid-template-columns: 300px 1fr 350px;
        gap: 20px; padding: 20px; max-width: 1400px; margin: 0 auto;
        min-height: calc(100vh - 80px);
      }
      .card { 
        background: rgba(16, 24, 54, 0.6); border-radius: 12px; 
        padding: 20px; border: 1px solid rgba(255,255,255,0.1);
        backdrop-filter: blur(10px);
      }
      .h { font-size: 16px; font-weight: 600; margin-bottom: 15px; color: #f1f5f9; }
      .hr { height: 1px; background: rgba(255,255,255,0.1); margin: 20px 0; }
      .kv { 
        display: flex; justify-content: space-between; align-items: center;
        padding: 8px 0; font-size: 14px;
      }
      .kv > div:first-child { color: #94a3b8; }
      .badge { 
        padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: 500;
        background: rgba(255,255,255,0.1); color: #e2e8f0;
      }
      .badge.ok { background: rgba(34, 197, 94, 0.2); color: #22c55e; }
      .badge.warn { background: rgba(245, 158, 11, 0.2); color: #f59e0b; }
      .badge.err { background: rgba(239, 68, 68, 0.2); color: #ef4444; }
      .label { 
        font-size: 13px; font-weight: 500; color: #cbd5e1; 
        margin: 15px 0 8px 0; 
      }
      .label:first-child { margin-top: 0; }
      input, select {
        width: 100%; padding: 10px; border: 1px solid rgba(255,255,255,0.2);
        border-radius: 6px; background: rgba(0,0,0,0.3); color: white;
        font-size: 14px;
      }
      input:focus, select:focus { 
        outline: none; border-color: #3b82f6; 
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
      }
      .rangeControl { 
        display: flex; align-items: center; gap: 10px; margin: 10px 0;
      }
      .rangeSlider { 
        flex: 1; height: 4px; background: rgba(255,255,255,0.2);
        border-radius: 2px; outline: none; cursor: pointer;
      }
      .leverageGrid {
        display: grid; grid-template-columns: repeat(4, 1fr); gap: 8px; margin: 10px 0;
      }
      .leverageGrid .btn { padding: 8px 4px; font-size: 13px; }
      .marginTypeSelect {
        display: grid; grid-template-columns: 1fr 1fr; gap: 8px; margin: 10px 0;
      }
      .row { display: flex; gap: 10px; align-items: center; }
      .canvasWrap { 
        position: relative; width: 100%; background: rgba(0,0,0,0.3); 
        border-radius: 8px; overflow: hidden; margin-bottom: 20px;
      }
      .canvasWrap.range-chart { height: 280px; }
      .canvasWrap.volume-chart { height: 200px; }
      #rangeChart, #volumeFeeChart { width: 100%; height: 100%; display: block; }
      .chartInfo { 
        display: flex; flex-wrap: wrap; gap: 8px; margin-top: 15px; 
        font-size: 12px;
      }
      .notifications {
        position: fixed; top: 80px; right: 20px; z-index: 1000;
        width: 320px; pointer-events: none;
      }
      .notification {
        background: rgba(16, 24, 54, 0.95); border-radius: 8px; padding: 12px 16px;
        margin-bottom: 10px; border-left: 4px solid #3b82f6;
        backdrop-filter: blur(10px); animation: slideIn 0.3s ease;
        font-size: 14px; box-shadow: 0 10px 25px rgba(0,0,0,0.3);
      }
      @keyframes slideIn {
        from { opacity: 0; transform: translateX(100%); }
        to { opacity: 1; transform: translateX(0); }
      }
      @media (max-width: 1200px) {
        .wrap { 
          grid-template-columns: 1fr; 
          grid-template-rows: auto auto auto;
        }
      }
    `;
    const style = document.createElement('style');
    style.textContent = css;
    document.head.appendChild(style);
  }

  // ---------- HTML ÏÉùÏÑ± ----------
  function createUI() {
    const nav = el('nav', { class: 'nav' }, [ el('div', { class: 'logo' }, ['üèõÔ∏è Pillar Protocol']), el('div', { class: 'right' }, [ el('div', { class: 'pill', id: 'networkBadge' }, ['ÎÑ§Ìä∏ÏõåÌÅ¨ ÌôïÏù∏ Ï§ë...']), el('button', { class: 'btn primary', id: 'connectBtn', onclick: connectWallet, disabled: true }, ['ÎùºÏù¥Î∏åÎü¨Î¶¨ Î°úÎî© Ï§ë...']) ]) ]);
    const leftPanel = el('div', { class: 'card' }, [ el('div', { class: 'h' }, ['Ìè¨Ìä∏Ìè¥Î¶¨Ïò§']), el('div', { class: 'kv' }, [ el('div', {}, ['ÏßÄÍ∞ë Ï£ºÏÜå']), el('div', { id: 'walletAddr', class: 'badge' }, ['Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùå']) ]), el('div', { class: 'kv' }, [ el('div', {}, ['ÎÑ§Ìä∏ÏõåÌÅ¨']), el('div', { id: 'chainInfo', class: 'badge' }, ['-']) ]), el('div', { class: 'hr' }), el('div', { class: 'h' }, ['ÏûêÏÇ∞ ÏûîÏï°']), el('div', { class: 'kv' }, [ el('div', {}, ['S (ÎÑ§Ïù¥Ìã∞Î∏å)']), el('div', { id: 'nativeBalance', class: 'badge' }, ['0.0000']) ]), el('div', { class: 'kv' }, [ el('div', {}, ['USDC']), el('div', { id: 'usdcBalance', class: 'badge' }, ['0.00']) ]), el('div', { class: 'kv' }, [ el('div', {}, ['WETH']), el('div', { id: 'wethBalance', class: 'badge' }, ['0.0000']) ]), el('div', { class: 'hr' }), el('div', { class: 'h' }, ['ÎÇ¥ Ìè¨ÏßÄÏÖò']), el('div', { id: 'positionsList' }, [ el('div', { class: 'badge', style: 'text-align:center; padding:20px;' }, ['Ìè¨ÏßÄÏÖòÏù¥ ÏóÜÏäµÎãàÎã§']) ]), el('div', { class: 'hr' }), el('div', { class: 'h' }, ['LP ÏàòÏùµ']), el('div', { class: 'kv' }, [ el('div', {}, ['Ï¥ù ÏàòÏàòÎ£å']), el('div', { id: 'totalFees', class: 'badge ok' }, ['0.00 USDC']) ]), el('div', { class: 'kv' }, [ el('div', {}, ['Ïã§ÌòÑ P&L']), el('div', { id: 'realizedPnl', class: 'badge' }, ['0.00 USDC']) ]) ]);
    
    // Ï§ëÏïô Ìå®ÎÑê: Ï∞®Ìä∏Î•º 2Í∞úÎ°ú Î∂ÑÎ¶¨
    const centerPanel = el('div', { class: 'card' }, [ 
      el('div', { class: 'h' }, ['Í∞ÄÍ≤© Î≤îÏúÑ Ï∞®Ìä∏ (Price Range)']),
      el('div', { class: 'canvasWrap range-chart' }, [ el('canvas', { id: 'rangeChart' }) ]),
      el('div', { class: 'h', style: 'margin-top: 20px;' }, ['Í±∞ÎûòÎüâ Î∞è ÏàòÏàòÎ£å Ï∞®Ìä∏']),
      el('div', { class: 'canvasWrap volume-chart' }, [ el('canvas', { id: 'volumeFeeChart' }) ]),
      el('div', { class: 'chartInfo' }, [ el('div', { class: 'pill active' }, [ 'ÌòÑÏû¨Í∞Ä: ', el('span', { id: 'currentPrice' }, [`\$${nice(state.currentPrice)}`]) ]), el('div', { class: 'pill' }, [ '24h Î≥ÄÎèô: ', el('span', { id: 'priceChange24h', style: 'margin-left:4px' }, [`+${state.priceChange24h}%`]) ]), el('div', { class: 'pill warn' }, [ 'Ï†ïÍ∑ú Î≤îÏúÑ: ¬±', el('span', { id: 'allowedRangeBps' }, [state.allowedRangeBps]), ' bps' ]), el('div', { class: 'pill' }, [ 'ÏÑ§Ï†ï Î≤îÏúÑ: ¬±', el('span', { id: 'selectedRangeBps' }, [state.selectedRange]), ' bps' ]) ]) 
    ]);

    const rightPanel = el('div', { class: 'card' }, [ el('div', { class: 'h' }, ['Î†àÎ≤ÑÎ¶¨ÏßÄ LP Ìè¨ÏßÄÏÖò']), el('div', { class: 'label' }, ['ÏûêÏÇ∞ ÌéòÏñ¥']), el('select', { id: 'assetPair' }, [ el('option', { value: 'ETH/USDC' }, ['ETH/USDC']) ]), el('div', { class: 'label' }, ['Îã¥Î≥¥ Í∏àÏï° (USDC)']), el('input', { id: 'collateralAmount', type: 'number', min: '100', placeholder: '1000', step: '0.01' }), el('div', { class: 'label' }, ['Î†àÎ≤ÑÎ¶¨ÏßÄ']), el('div', { class: 'rangeControl' }, [ el('div', {}, ['1x']), el('input', { id: 'leverageSlider', class: 'rangeSlider', type: 'range', min: '10000', max: '50000', step: '5000', value: '20000' }), el('div', { id: 'leverageValue' }, ['2.0x']) ]), el('div', { class: 'leverageGrid' }, [ el('button', { class: 'btn ghost lev-btn', 'data-lev': '10000' }, ['1x']), el('button', { class: 'btn ghost lev-btn active', 'data-lev': '20000' }, ['2x']), el('button', { class: 'btn ghost lev-btn', 'data-lev': '30000' }, ['3x']), el('button', { class: 'btn ghost lev-btn', 'data-lev': '50000' }, ['5x']) ]), el('div', { class: 'label' }, ['Í∞ÄÍ≤© Î≤îÏúÑ (ÏûêÎèô ‚Üî ÏàòÎèô)']), el('div', { class: 'rangeControl' }, [ el('div', {}, ['Ï¢ÅÏùå']), el('input', { id: 'rangeSlider', class: 'rangeSlider', type: 'range', min: '0', max: '5000', step: '50', value: '0' }), el('div', {}, ['ÎÑìÏùå']) ]), el('div', { class: 'badge', style: 'text-align:center; font-size:11px;' }, ['0 = ÏûêÎèô ÏµúÏ†ÅÌôî, Í∞í ÏÑ§Ï†ï = ÏàòÎèô Ï°∞Ï†ï']), el('div', { class: 'label' }, ['ÎßàÏßÑ ÌÉÄÏûÖ']), el('div', { class: 'marginTypeSelect' }, [ el('button', { class: 'btn ghost margin-btn', 'data-type': '0' }, ['CROSS']), el('button', { class: 'btn ghost margin-btn active', 'data-type': '1' }, ['ISOLATED']) ]), el('div', { class: 'hr' }), el('div', { class: 'label' }, ['Ìè¨ÏßÄÏÖò ÎØ∏Î¶¨Î≥¥Í∏∞']), el('div', { class: 'kv' }, [ el('div', {}, ['Ï∞®ÏûÖ Í∏àÏï°']), el('div', { id: 'borrowAmount', class: 'badge' }, ['-']) ]), el('div', { class: 'kv' }, [ el('div', {}, ['Ïã§Ïßà Î†àÎ≤ÑÎ¶¨ÏßÄ']), el('div', { id: 'effectiveLeverage', class: 'badge' }, ['2.0x']) ]), el('div', { class: 'kv' }, [ el('div', {}, ['ÏòàÏÉÅ ÏàòÏùµÎ•†']), el('div', { id: 'expectedApr', class: 'badge ok' }, ['8.5% APR']) ]), el('div', { class: 'kv' }, [ el('div', {}, ['Î¶¨Ïä§ÌÅ¨ Î†àÎ≤®']), el('div', { id: 'riskLevel', class: 'badge warn' }, ['Ï§ëÍ∞Ñ']) ]), el('div', { class: 'row', style: 'margin-top:20px;' }, [ el('button', { class: 'btn primary', id: 'openPositionBtn', style: 'flex:1;', onclick: openPosition }, ['Ìè¨ÏßÄÏÖò Ïò§Ìîà']) ]) ]);
    const notifications = el('div', { class: 'notifications', id: 'notifications' });
    const wrap = el('div', { class: 'wrap' }, [leftPanel, centerPanel, rightPanel]);
    document.body.appendChild(nav);
    document.body.appendChild(wrap);
    document.body.appendChild(notifications);
  }

  // ---------- ÏßÄÍ∞ë Ïó∞Í≤∞ Î°úÏßÅ ----------
  function connectWalletState(address, chain, networkId) { state.userAddress = address; state.chainId = networkId; state.isConnected = true; localStorage.setItem('sonic_wallet_address', address); localStorage.setItem('sonic_wallet_network', networkId.toString()); }
  function disconnectWalletState() { state.provider = null; state.signer = null; state.userAddress = null; state.chainId = null; state.isConnected = false; localStorage.removeItem('sonic_wallet_address'); localStorage.removeItem('sonic_wallet_network'); }
  function waitForEthers(maxAttempts = 10) { return new Promise((resolve, reject) => { let attempts = 0; function check() { attempts++; if (window.ethers && window.ethers.BrowserProvider) { console.log('ethers.js Î°úÎìú ÏôÑÎ£å'); resolve(true); } else if (attempts >= maxAttempts) { reject(new Error('ethers.js Î°úÎìú ÌÉÄÏûÑÏïÑÏõÉ')); } else { setTimeout(check, 500); } } check(); }); }
  async function checkWalletConnection() { try { await waitForEthers(); if (typeof window !== 'undefined' && window.ethereum) { const accounts = await window.ethereum.request({ method: 'eth_accounts' }); if (accounts && accounts.length > 0) { const account = accounts[0]; try { const network = await sonicClient.getNetwork(); const networkId = Number(network.chainId); connectWalletState(account, 'EVM', networkId); state.provider = new window.ethers.BrowserProvider(window.ethereum); state.signer = await state.provider.getSigner(); } catch (networkError) { const storedNetwork = localStorage.getItem('sonic_wallet_network'); const networkId = storedNetwork ? parseInt(storedNetwork) : CURRENT_NETWORK.chainId; connectWalletState(account, 'EVM', networkId); state.provider = new window.ethers.BrowserProvider(window.ethereum); state.signer = await state.provider.getSigner(); } } else { disconnectWalletState(); } } else { disconnectWalletState(); } } catch (error) { console.warn('Wallet connection check failed:', error); disconnectWalletState(); } }
  function handleAccountsChanged(accounts) { if (accounts.length === 0) { showNotification('ÏßÄÍ∞ë Ïó∞Í≤∞Ïù¥ Ìï¥Ï†úÎêòÏóàÏäµÎãàÎã§.', 'warn'); disconnectWalletState(); updateWalletUI(); } else { const account = accounts[0]; const storedNetwork = localStorage.getItem('sonic_wallet_network'); const networkId = storedNetwork ? parseInt(storedNetwork) : CURRENT_NETWORK.chainId; connectWalletState(account, 'EVM', networkId); localStorage.setItem('sonic_wallet_address', account); updateWalletUI(); showNotification('ÏßÄÍ∞ë Í≥ÑÏ†ïÏù¥ Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§.', 'info'); } }
  function handleChainChanged(chainId) { const networkId = parseInt(chainId, 16); localStorage.setItem('sonic_wallet_network', networkId.toString()); if (state.userAddress) { connectWalletState(state.userAddress, 'EVM', networkId); } showNotification('ÎÑ§Ìä∏ÏõåÌÅ¨Í∞Ä Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§. ÌéòÏù¥ÏßÄÎ•º ÏÉàÎ°úÍ≥†Ïπ®Ìï©ÎãàÎã§.', 'info'); setTimeout(() => window.location.reload(), 1500); }
  function setupWalletListeners() { if (typeof window !== 'undefined' && window.ethereum) { if (window.ethereum.removeListener) { window.ethereum.removeListener('accountsChanged', handleAccountsChanged); window.ethereum.removeListener('chainChanged', handleChainChanged); } window.ethereum.on('accountsChanged', handleAccountsChanged); window.ethereum.on('chainChanged', handleChainChanged); } }
  async function connectWallet() { if (typeof window.ethereum === 'undefined') { return showNotification('MetaMaskÏôÄ Í∞ôÏùÄ EVM ÏßÄÍ∞ëÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.', 'error'); } try { showNotification('ÏßÄÍ∞ë Ïó∞Í≤∞ Ï§ë...', 'info'); await waitForEthers(); state.provider = new window.ethers.BrowserProvider(window.ethereum); const accounts = await state.provider.send("eth_requestAccounts", []); if (!accounts || accounts.length === 0) throw new Error("Í≥ÑÏ†ïÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."); const account = accounts[0]; const network = await state.provider.getNetwork(); const networkId = Number(network.chainId); if (networkId !== CURRENT_NETWORK.chainId) { await switchToCurrentNetwork(window.ethereum); setTimeout(() => window.location.reload(), 1000); return; } state.signer = await state.provider.getSigner(); connectWalletState(account, 'EVM', networkId); updateWalletUI(); loadInitialData(); showNotification('ÏßÄÍ∞ë Ïó∞Í≤∞ ÏÑ±Í≥µ!', 'success'); } catch (error) { console.error('ÏßÄÍ∞ë Ïó∞Í≤∞ Ïò§Î•ò:', error); if (error.code === 4001) { showNotification('ÏßÄÍ∞ë Ïó∞Í≤∞Ïù¥ ÏÇ¨Ïö©ÏûêÏóê ÏùòÌï¥ Í±∞Î∂ÄÎêòÏóàÏäµÎãàÎã§.', 'warn'); } else { showNotification(error.message || 'ÏßÄÍ∞ë Ïó∞Í≤∞Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'error'); } disconnectWalletState(); updateWalletUI(); } }
  async function switchToCurrentNetwork(provider) { if (!provider) return showNotification('ÏßÄÍ∞ë Í≥µÍ∏âÏûêÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.', 'error'); try { showNotification(`${CURRENT_NETWORK.chainName}ÏúºÎ°ú Ï†ÑÌôòÌï©ÎãàÎã§...`, 'info'); await provider.request({ method: 'wallet_switchEthereumChain', params: [{ chainId: `0x${CURRENT_NETWORK.chainId.toString(16)}` }], }); } catch (switchError) { if (switchError.code === 4902) { try { await provider.request({ method: 'wallet_addEthereumChain', params: [CURRENT_NETWORK], }); } catch (addError) { showNotification('ÎÑ§Ìä∏ÏõåÌÅ¨ Ï∂îÍ∞ÄÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'error'); } } else { showNotification('ÎÑ§Ìä∏ÏõåÌÅ¨ Ï†ÑÌôòÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.', 'error'); } } }
  async function initializeWalletConnection() { const storedAddress = localStorage.getItem('sonic_wallet_address'); const storedNetwork = localStorage.getItem('sonic_wallet_network'); if (storedAddress && !state.userAddress) { const networkId = storedNetwork ? parseInt(storedNetwork) : CURRENT_NETWORK.chainId; connectWalletState(storedAddress, 'EVM', networkId); } await checkWalletConnection(); setupWalletListeners(); updateWalletUI(); }
  function updateWalletUI() { const connectBtn = document.getElementById('connectBtn'); if (state.isConnected && state.userAddress) { const shortAddr = `${state.userAddress.slice(0, 6)}...${state.userAddress.slice(-4)}`; document.getElementById('walletAddr').textContent = shortAddr; document.getElementById('chainInfo').textContent = CURRENT_NETWORK.chainName; document.getElementById('networkBadge').textContent = CURRENT_NETWORK.chainName; document.getElementById('networkBadge').className = 'pill active'; connectBtn.textContent = shortAddr; connectBtn.className = 'btn ghost'; connectBtn.onclick = null; } else { document.getElementById('walletAddr').textContent = 'Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùå'; document.getElementById('chainInfo').textContent = '-'; document.getElementById('networkBadge').textContent = 'Ïó∞Í≤∞ ÌïÑÏöî'; document.getElementById('networkBadge').className = 'pill warn'; connectBtn.textContent = 'ÏßÄÍ∞ë Ïó∞Í≤∞'; connectBtn.className = 'btn primary'; connectBtn.onclick = connectWallet; } }

  // ---------- Ï∞®Ìä∏ Í¥ÄÎ¶¨ ----------
  let volumeFeeChartInstance = null;
  let rangeChartInstance = null;
  const chartState = { labels: [], volumeData: [], feeData: [] };

  function initializeCharts() {
    for (let i = 0; i < 30; i++) {
      chartState.labels.push(`T-${30 - i}`);
      chartState.volumeData.push(Math.random() * 1000 + 500);
      chartState.feeData.push(Math.random() * 5 + (i * 0.2));
    }
    initializeRangeChart();
    initializeVolumeFeeChart();
    setInterval(simulateWashTrade, 5000);
  }

  function initializeRangeChart() {
    const ctx = document.getElementById('rangeChart').getContext('2d');
    rangeChartInstance = new Chart(ctx, {
      type: 'line',
      data: {
        labels: chartState.labels,
        datasets: [{
            label: 'Current Price',
            data: Array(30).fill(state.currentPrice),
            borderColor: 'rgba(255, 255, 255, 0.2)',
            borderWidth: 2,
            pointRadius: 0,
            tension: 0.1
        }]
      },
      options: {
        maintainAspectRatio: false,
        scales: {
            x: { ticks: { color: '#94a3b8' }, grid: { color: 'rgba(255,255,255,0.1)' } },
            y: { ticks: { color: '#94a3b8' }, grid: { color: 'rgba(255,255,255,0.1)' }, title: { display: true, text: 'Í∞ÄÍ≤© (USDC)', color: '#cbd5e1' } }
        },
        plugins: {
          legend: { display: false },
          annotation: { annotations: {} }
        }
      }
    });
    updateRangeChartAnnotations();
  }
  
  function initializeVolumeFeeChart() {
    const ctx = document.getElementById('volumeFeeChart').getContext('2d');
    volumeFeeChartInstance = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: chartState.labels,
        datasets: [{
          label: 'Í±∞ÎûòÎüâ (Volume)',
          data: chartState.volumeData,
          backgroundColor: 'rgba(59, 130, 246, 0.6)',
        }, {
          label: 'ÎàÑÏ†Å ÏàòÏàòÎ£å (Fees)',
          data: chartState.feeData,
          backgroundColor: 'rgba(34, 197, 94, 0.6)',
          yAxisID: 'y1'
        }]
      },
      options: {
        maintainAspectRatio: false,
        scales: {
          x: { ticks: { color: '#94a3b8' }, grid: { color: 'rgba(255,255,255,0.1)' } },
          y: { beginAtZero: true, position: 'left', ticks: { color: '#94a3b8' }, grid: { color: 'rgba(255,255,255,0.1)' }, title: { display: true, text: 'Í±∞ÎûòÎüâ', color: '#cbd5e1' } },
          y1: { beginAtZero: true, position: 'right', ticks: { color: '#22c55e' }, grid: { drawOnChartArea: false }, title: { display: true, text: 'ÏàòÏàòÎ£å (USDC)', color: '#22c55e' } }
        },
        plugins: {
          legend: { labels: { color: '#e2e8f0' } }
        }
      }
    });
  }

  function simulateWashTrade() {
    if (!volumeFeeChartInstance) return;
    chartState.labels.shift(); chartState.labels.push(`T-${new Date().getSeconds()}`);
    chartState.volumeData.shift(); chartState.volumeData.push(Math.random() * 1000 + 500);
    const newFee = chartState.feeData[chartState.feeData.length - 1] + (Math.random() * 2);
    chartState.feeData.shift(); chartState.feeData.push(newFee);
    
    volumeFeeChartInstance.data.labels = chartState.labels;
    volumeFeeChartInstance.data.datasets[0].data = chartState.volumeData;
    volumeFeeChartInstance.data.datasets[1].data = chartState.feeData;
    volumeFeeChartInstance.update('none');
    
    document.getElementById('totalFees').textContent = `${nice(newFee)} USDC`;
  }
  
  function updateRangeChartAnnotations() {
    if (!rangeChartInstance) return;
    const { currentPrice, allowedRangeBps, selectedRange } = state;
    const normalLower = currentPrice * (1 - allowedRangeBps / 10000);
    const normalUpper = currentPrice * (1 + allowedRangeBps / 10000);
    const effectiveRangeBps = selectedRange === 0 ? allowedRangeBps : selectedRange;
    const selectedLower = currentPrice * (1 - effectiveRangeBps / 10000);
    const selectedUpper = currentPrice * (1 + effectiveRangeBps / 10000);
    rangeChartInstance.options.plugins.annotation.annotations = {
      normalRange: { type: 'box', yMin: normalLower, yMax: normalUpper, backgroundColor: 'rgba(245, 158, 11, 0.2)', borderColor: 'rgba(245, 158, 11, 0.5)', borderWidth: 1 },
      selectedRange: { type: 'box', yMin: selectedLower, yMax: selectedUpper, backgroundColor: 'rgba(255, 255, 255, 0.15)', borderColor: 'rgba(255, 255, 255, 0.8)', borderWidth: 2, borderDash: [6, 6] }
    };
    rangeChartInstance.update();
  }

  // ---------- ÌïµÏã¨ Î°úÏßÅ (Ìä∏ÎûúÏû≠ÏÖò Î∞è Îç∞Ïù¥ÌÑ∞ Î°úÎìú) ----------
  async function openPosition() {
    if (!state.isConnected || !state.signer) {
      return showNotification('Î®ºÏ†Ä ÏßÄÍ∞ëÏùÑ Ïó∞Í≤∞Ìï¥Ï£ºÏÑ∏Ïöî', 'warn');
    }
    const collateralAmountStr = document.getElementById('collateralAmount').value;
    if (!collateralAmountStr || parseFloat(collateralAmountStr) < 100) {
      return showNotification('ÏµúÏÜå 100 USDC Îã¥Î≥¥Í∞Ä ÌïÑÏöîÌï©ÎãàÎã§', 'warn');
    }
    const collateralAmount = window.ethers.parseUnits(collateralAmountStr, 6);

    try {
      showNotification('Ìä∏ÎûúÏû≠ÏÖò Ï§ÄÎπÑ Ï§ë...', 'info');
      document.getElementById('openPositionBtn').disabled = true;

      const usdcContract = new window.ethers.Contract(CONTRACTS.usdc, USDC_ABI, state.signer);
      const vaultContract = new window.ethers.Contract(CONTRACTS.dynamicVault, DYNAMIC_VAULT_ABI, state.signer);
      
      showNotification('USDC ÏÇ¨Ïö© ÏäπÏù∏ÏùÑ ÏöîÏ≤≠Ìï©ÎãàÎã§...', 'info');
      const approveTx = await usdcContract.approve(CONTRACTS.dynamicVault, collateralAmount);
      await approveTx.wait();
      showNotification('USDC ÏÇ¨Ïö© ÏäπÏù∏ ÏôÑÎ£å!', 'success');

      showNotification('Ìè¨ÏßÄÏÖò Ïò§Ìîà Ìä∏ÎûúÏû≠ÏÖòÏùÑ ÏöîÏ≤≠Ìï©ÎãàÎã§...', 'info');
      const tx = await vaultContract.openPosition(
        collateralAmount, state.leverage, state.selectedRange, state.marginType
      );
      showNotification(`Ìä∏ÎûúÏû≠ÏÖò Ï†úÏ∂úÎê®: ${tx.hash.slice(0,10)}...`, 'info');
      
      const receipt = await tx.wait();
      
      if (receipt.status === 1) {
        showNotification('Ìè¨ÏßÄÏÖò Ïò§Ìîà ÏÑ±Í≥µ!', 'success');
        document.getElementById('collateralAmount').value = '';
        loadInitialData();
      } else {
        throw new Error("Ìä∏ÎûúÏû≠ÏÖòÏù¥ Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
      }
    } catch (error) {
      console.error('Ìè¨ÏßÄÏÖò Ïò§Ìîà Ïò§Î•ò:', error);
      showNotification(`Ïò§Î•ò: ${error.reason || error.message}`, 'error');
    } finally {
      document.getElementById('openPositionBtn').disabled = false;
    }
  }

  async function loadInitialData() {
    await loadBalances();
    updatePreview();
  }

  async function loadBalances() {
    if (!state.provider || !state.userAddress) return;
    try {
      await waitForEthers();
      const nativeBalance = await state.provider.getBalance(state.userAddress);
      state.balances.native = window.ethers.formatEther(nativeBalance);
      document.getElementById('nativeBalance').textContent = parseFloat(state.balances.native).toFixed(4);
      
      state.balances.usdc = '1000000';
      document.getElementById('usdcBalance').textContent = nice(state.balances.usdc);
      
      state.balances.weth = '0.0000';
      document.getElementById('wethBalance').textContent = parseFloat(state.balances.weth).toFixed(4);
      
    } catch (error) {
      console.error('ÏûîÏï° Î°úÎìú Ïò§Î•ò:', error);
    }
  }

  function updatePreview() {
    document.getElementById('effectiveLeverage').textContent = `${(state.leverage / 10000).toFixed(1)}x`;
    const collateral = parseFloat(document.getElementById('collateralAmount').value || '0');
    if (collateral > 0) {
      const borrowAmount = collateral * (state.leverage / 10000 - 1);
      document.getElementById('borrowAmount').textContent = `${nice(borrowAmount)} USDC`;
    } else {
      document.getElementById('borrowAmount').textContent = '-';
    }
    const selectedRangeText = state.selectedRange === 0 ? 'auto' : state.selectedRange.toString();
    document.getElementById('selectedRangeBps').textContent = selectedRangeText;
    const baseApr = 5.2;
    const leverageMultiplier = state.leverage / 10000;
    const expectedApr = (baseApr * leverageMultiplier).toFixed(1);
    document.getElementById('expectedApr').textContent = `${expectedApr}% APR`;
    let riskLevel = 'ÎÇÆÏùå'; let riskClass = 'ok';
    if (state.leverage >= 30000) { riskLevel = 'ÎÜíÏùå'; riskClass = 'err'; } 
    else if (state.leverage >= 20000) { riskLevel = 'Ï§ëÍ∞Ñ'; riskClass = 'warn'; }
    const riskEl = document.getElementById('riskLevel');
    riskEl.textContent = riskLevel;
    riskEl.className = `badge ${riskClass}`;
  }

  // ---------- Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï ----------
  function setupEventListeners() {
    document.getElementById('leverageSlider').addEventListener('input', (e) => {
      state.leverage = parseInt(e.target.value);
      document.getElementById('leverageValue').textContent = `${(state.leverage / 10000).toFixed(1)}x`;
      document.querySelectorAll('.lev-btn').forEach(btn => btn.classList.toggle('active', btn.dataset.lev === e.target.value));
      updatePreview();
    });
    document.querySelectorAll('.lev-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        const value = btn.dataset.lev;
        document.getElementById('leverageSlider').value = value;
        state.leverage = parseInt(value);
        document.getElementById('leverageValue').textContent = `${(state.leverage / 10000).toFixed(1)}x`;
        document.querySelectorAll('.lev-btn').forEach(b => b.classList.toggle('active', b === btn));
        updatePreview();
      });
    });
    document.getElementById('rangeSlider').addEventListener('input', (e) => {
      state.selectedRange = parseInt(e.target.value);
      updatePreview();
      updateRangeChartAnnotations();
    });
    document.querySelectorAll('.margin-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        state.marginType = parseInt(btn.dataset.type);
        document.querySelectorAll('.margin-btn').forEach(b => b.classList.toggle('active', b === btn));
        updatePreview();
      });
    });
    document.getElementById('collateralAmount').addEventListener('input', updatePreview);
  }

  // ---------- ÏïåÎ¶º ÏãúÏä§ÌÖú ----------
  function showNotification(message, type = 'info') {
    const container = document.getElementById('notifications');
    if (!container) return;
    const notification = el('div', { class: 'notification' }, [message]);
    if (type === 'error') notification.style.borderLeftColor = '#ef4444';
    else if (type === 'warn') notification.style.borderLeftColor = '#f59e0b';
    else if (type === 'success') notification.style.borderLeftColor = '#22c55e';
    container.appendChild(notification);
    setTimeout(() => {
      if (container.contains(notification)) {
        notification.style.opacity = '0';
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => { if (container.contains(notification)) container.removeChild(notification); }, 300);
      }
    }, 5000);
  }

  // ---------- Î∂ÄÌä∏Ïä§Ìä∏Îû© ----------
  async function bootstrap() {
    try {
      console.log('Pillar Protocol Î∂ÄÌä∏Ïä§Ìä∏Îû© ÏãúÏûë...');
      injectStyles();
      createUI();

      await Promise.all([
        import('https://cdn.jsdelivr.net/npm/ethers@6.13.2/dist/ethers.min.js'),
        loadScript('https://cdn.jsdelivr.net/npm/chart.js'),
        loadScript('https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@3.0.1/dist/chartjs-plugin-annotation.min.js')
      ]).then(([ethersModule]) => {
          window.ethers = ethersModule;
          console.log('ethers.js Î∞è Chart.js ÎùºÏù¥Î∏åÎü¨Î¶¨ Î°úÎìú ÏôÑÎ£å');
      });

      await waitForEthers();
      
      const connectBtn = document.getElementById('connectBtn');
      if (connectBtn) {
        connectBtn.disabled = false;
        connectBtn.textContent = 'ÏßÄÍ∞ë Ïó∞Í≤∞';
      }
      
      setupEventListeners();
      updatePreview();
      initializeCharts();
      await initializeWalletConnection();
      
      console.log('Pillar Protocol Ï§ÄÎπÑ ÏôÑÎ£å!');
      
      if (window.ethereum && !state.isConnected) {
        setTimeout(() => showNotification('ÏßÄÍ∞ëÏùÑ Ïó∞Í≤∞ÌïòÏó¨ Pillar ProtocolÏùÑ ÏãúÏûëÌïòÏÑ∏Ïöî', 'info'), 1000);
      }
      
    } catch (error) {
      console.error('Î∂ÄÌä∏Ïä§Ìä∏Îû© Ïò§Î•ò:', error);
      let errorMessage = `Ï¥àÍ∏∞Ìôî Ïã§Ìå®: ${error.message}`;
      document.body.innerHTML = `<div style="color: #ef4444; padding: 40px; text-align: center; background: #0a0a0a; min-height: 100vh; font-family: -apple-system, BlinkMacSystemFont, sans-serif;"><h1 style="color: #60a5fa; margin-bottom: 20px;">üèõÔ∏è Pillar Protocol</h1><h2>Ï¥àÍ∏∞Ìôî Ïò§Î•ò</h2><p style="margin: 20px 0; color: #94a3b8;">${errorMessage}</p><button onclick="window.location.reload()" style="background: #3b82f6; color: white; border: none; padding: 12px 24px; border-radius: 6px; cursor: pointer; font-size: 14px; font-weight: 500;">ÌéòÏù¥ÏßÄ ÏÉàÎ°úÍ≥†Ïπ®</button></div>`;
    }
  }

  window.pillarDebug = {
    state: () => state,
    connectWallet,
    showNotification,
    checkConnection: checkWalletConnection
  };

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', bootstrap);
  } else {
    bootstrap();
  }
})();


